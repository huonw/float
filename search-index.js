var searchIndex = {};
searchIndex['float'] = {"items":[[0,"","float","",null,null],[3,"Float","","",null,null],[4,"Sign","","",null,null],[13,"Neg","","",0,null],[13,"Pos","","",0,null],[11,"neg","","",1,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"add_assign","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"add","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"add","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"sub_assign","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"sub","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"sub","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"f32"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"f64"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"i8"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"i16"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"i64"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"isize"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"u8"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"u16"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"float"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"float"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"float"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"int"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"i8"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"i16"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"i64"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"isize"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"u8"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"u16"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"u64"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"usize"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"f64"}],"output":{"name":"float"}}],[11,"from","","",1,{"inputs":[{"name":"float"},{"name":"f32"}],"output":{"name":"float"}}],[11,"mul_assign","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"mul","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"mul","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"div_assign","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"div","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"div","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"sqrt","","",1,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"bitxor","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",1,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"clone_from","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"float"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"neg_zero","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"max","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"min","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"min_positive","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"infinity","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"neg_infinity","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"nan","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"next_above","","",1,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"next_below","","",1,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"next_toward","","",1,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"float"}}],[11,"rand","","Generate a float in [0, 1), with the same distribution as\ngenerating an integer in [0, 2**p) and dividing by\n2**p. (i.e. pretty close to uniform, but the smallest bits\naren't quite right).",1,{"inputs":[{"name":"float"},{"name":"r"},{"name":"u32"}],"output":{"name":"float"}}],[11,"abs","","",1,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"sign","","",1,{"inputs":[{"name":"float"}],"output":{"name":"option"}}],[11,"negate","","",1,{"inputs":[{"name":"float"}],"output":null}],[11,"precision","","",1,{"inputs":[{"name":"float"}],"output":{"name":"u32"}}],[11,"with_precision","","",1,{"inputs":[{"name":"float"},{"name":"u32"}],"output":{"name":"float"}}],[11,"mul_exp2","","",1,{"inputs":[{"name":"float"},{"name":"i64"}],"output":{"name":"float"}}]],"paths":[[4,"Sign"],[3,"Float"]]};
searchIndex['ramp'] = {"items":[[0,"","ramp","",null,null],[0,"ll","","This module provides the low-level operations for working with arbitrary precision numbers.",null,null],[5,"shl","ramp::ll","Performs a bit-shift of the limbs in {xp, xs}, left by `cnt` bits storing the result in {rp,\nrs}. The top-most shifted bits are returned.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":{"name":"limb"}}],[5,"shr","","Performs a bit-shift of the limbs in {xp, xs}, right by `cnt` bits storing the result in {rp,\nrs}. The bottom-most shifted bits are returned.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":{"name":"limb"}}],[5,"and_n","","Performs a bitwise \"and\" (`&`) of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"and_not_n","","Performs a bitwise and of the n least signficant limbs of `xp` and `yp`, with the limbs of `yp`\nbeing first inverted. The result is stored in `wp`.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"nand_n","","Performs a bitwise \"nand\" of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"or_n","","Performs a bitwise \"or\" (`|`) of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"or_not_n","","Performs a bitwise \"or\" of the n least signficant limbs of `xp` and `yp`, with the limbs of `yp`\nbeing first inverted. The result is stored in `wp`.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"nor_n","","Performs a bitwise \"nor\" of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"xor_n","","Performs a bitwise \"xor\" (`^`) of the n least signficant limbs of `xp` and `yp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"not","","Performs a bitwise inversion (\"not\") of the n least signficant limbs of `xp`, storing the\nresult in `wp`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"scan_1","","Scans for the first 1 bit starting from the least-significant bit the the most, returning\nthe bit index.",null,{"inputs":[{"name":"limbs"},{"name":"i32"}],"output":{"name":"u32"}}],[5,"scan_0","","Scans for the first 0 bit starting from the least-significant bit the the most, returning\nthe bit index.",null,{"inputs":[{"name":"limbs"},{"name":"i32"}],"output":{"name":"u32"}}],[5,"twos_complement","","Computes the two's complement of the `xs` least significant words\nof `xp`. The result is stored the result in `wp`, and a carry is\nreturned, if there is one.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"add_n","","Adds the `n` least signficant limbs of `xp` and `yp`, storing the result in {wp, n}.\nIf there was a carry, it is returned.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"sub_n","","Subtracts the `n` least signficant limbs of `yp` from `xp`, storing the result in {wp, n}.\nIf there was a borrow from a higher-limb (i.e., the result would be negative), it is returned.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"add","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"sub","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"limb"}}],[5,"add_1","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"sub_1","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"incr","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limb"}],"output":null}],[5,"decr","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limb"}],"output":null}],[5,"addmul_1","","Multiplies the `n` least-signficiant digits of `xp` by `vl` and adds them to the `n`\nleast-significant digits of `wp`. Returns the highest limb of the result.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"submul_1","","Multiplies the `n` least-signficiant digits of `xp` by `vl` and subtracts them from the `n`\nleast-significant digits of `wp`. Returns the highest limb of the result, adjust for borrow.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"mul_1","","Multiplies the `n` least-significant limbs of `xp` by `vl` storing the `n` least-significant\nlimbs of the product in `{wp, n}`.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"mul","","Multiplies `{xp, xs}` by `{yp, ys}`, storing the result to `{wp, xs + ys}`.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"sqr","","Squares the number in `{xp, xs}` storing the result in `{wp, xs*2}`.\nThis is slightly more efficient than regular multiplication with both\ninputs the same.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"divrem_1","","Divides the `xs` least-significant limbs at `xp` by `d`, storing the result in {qp, qxn + xs}.",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"},{"name":"limb"}],"output":{"name":"limb"}}],[5,"divrem_2","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"}],"output":{"name":"limb"}}],[5,"divrem","","Divides {np, ns} by {dp, ds}. If ns <= ds, the quotient is stored in {qp, 1}, otherwise\nthe quotient is stored to {qp, (ns - ds) + 1}. The remainder is always stored to {rp, ds}.",null,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":null}],[5,"gcd","","",null,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"},{"name":"i32"},{"name":"limbsmut"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"overlap","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"same_or_separate","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"same_or_incr","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"same_or_decr","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"copy_incr","","Copies the `n` limbs from `src` to `dst` in an incremental fashion.",null,{"inputs":[{"name":"limbs"},{"name":"limbsmut"},{"name":"i32"}],"output":null}],[5,"copy_decr","","Copies the `n` limbs from `src` to `dst` in a decremental fashion.",null,{"inputs":[{"name":"limbs"},{"name":"limbsmut"},{"name":"i32"}],"output":null}],[5,"copy_rest","","Copies the `n - start` limbs from `src + start` to `dst + start`",null,{"inputs":[{"name":"limbs"},{"name":"limbsmut"},{"name":"i32"},{"name":"i32"}],"output":null}],[5,"normalize","","Returns the size of the integer pointed to by `p` such that the most\nsignificant limb is non-zero.",null,{"inputs":[{"name":"limbs"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"divide_by_zero","","Called when a divide by zero occurs.",null,{"inputs":[],"output":null}],[5,"is_zero","","Checks that all `nn` limbs in `np` are zero",null,{"inputs":[{"name":"limbs"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"zero","","",null,{"inputs":[{"name":"limbsmut"},{"name":"i32"}],"output":null}],[5,"cmp","","Compares the `n` least-significant limbs of `xp` and `yp`, returning whether\n{xp, n} is less than, equal to or greater than {yp, n}",null,{"inputs":[{"name":"limbs"},{"name":"limbs"},{"name":"i32"}],"output":{"name":"ordering"}}],[0,"pow","","",null,null],[5,"pow","ramp::ll::pow","Takes `{ap, an}` to the power of `exp` and stores the result to `wp`. `wp` is\nassumed to have enough space to store the result (which can be calculated using\n`num_pow_limbs`",null,{"inputs":[{"name":"limbsmut"},{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":null}],[5,"num_pow_limbs","","Calculates the number of limbs required to store the result of taking\n`{xp, xn}` to the power of `exp`",null,{"inputs":[{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[0,"base","ramp::ll","Base conversion utilities",null,null],[5,"num_base_digits","ramp::ll::base","",null,{"inputs":[{"name":"limbs"},{"name":"i32"},{"name":"u32"}],"output":{"name":"usize"}}],[5,"base_digits_to_len","","",null,{"inputs":[{"name":"usize"},{"name":"u32"}],"output":{"name":"usize"}}],[5,"to_base","","Converts `nn` limbs at `np` to the given base, storing the output in `out`. `out` is assumed to\nhave enough space for the entire digit. The output is stored from most-significant digit to least.",null,{"inputs":[{"name":"u32"},{"name":"limbs"},{"name":"i32"},{"name":"f"}],"output":null}],[5,"from_base","","Converts the base `base` bytestring {bp, bs}, storing the limbs in `out`. `out` is assumed to\nhave enough space to store the result.",null,null],[0,"limb","ramp::ll","",null,null],[3,"Limb","ramp::ll::limb","Helper newtype for operations.",null,null],[5,"add_2","","Performs the two-word addition (ah, al) + (bh, bl), ignoring any overflow.",null,null],[5,"sub_2","","Performs the two-word subtraction (ah, al) - (bh, bl), ignoring any borrow.",null,null],[5,"div","","Divides the two-limb numerator `(nh, nl)` by `d`, returning a single-limb\nquotient, Q, and remainder, R, as (Q, R).",null,null],[5,"div_preinv","","Divides `(nh, nl)` by `d` using the inverted limb `dinv`. Returns the quotient, Q, and\nremainder, R, as (Q, R);",null,null],[6,"BaseInt","","",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[17,"BITS","","",null,null],[17,"B","","",null,null],[11,"high_part","","Returns the high half of the limb",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"low_part","","Returns the low half of the limb",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"add_overflow","","Performs `self + other`, returning the result and whether or not the addition overflowed",0,null],[11,"sub_overflow","","Performs `self - other`, returning the result and whether or not the subtraction overflowed",0,null],[11,"mul_lo","","Performs `self * other` returning the lower half of the product",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"mul_hi","","Performs `self * other` returning the higher half of the product",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"mul_hilo","","Performs `self * other` returning the two-limb result as (high, low).",0,null],[11,"invert","","",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"high_bit_set","","Returns whether or not the highest bit in the limb is set.",0,{"inputs":[{"name":"limb"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the limb",0,{"inputs":[{"name":"limb"}],"output":{"name":"baseint"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the limb",0,{"inputs":[{"name":"limb"}],"output":{"name":"baseint"}}],[11,"add","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"add","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"add","","",0,{"inputs":[{"name":"limb"},{"name":"bool"}],"output":{"name":"limb"}}],[11,"add","","",1,{"inputs":[{"name":"baseint"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"sub","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"sub","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"sub","","",0,{"inputs":[{"name":"limb"},{"name":"bool"}],"output":{"name":"limb"}}],[11,"sub","","",1,{"inputs":[{"name":"baseint"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"mul","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"mul","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"mul","","",1,{"inputs":[{"name":"baseint"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"div","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"div","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"rem","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"rem","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"limb"}}],[11,"neg","","",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"shl","","",0,{"inputs":[{"name":"limb"},{"name":"i"}],"output":{"name":"limb"}}],[11,"shr","","",0,{"inputs":[{"name":"limb"},{"name":"i"}],"output":{"name":"limb"}}],[11,"not","","",0,{"inputs":[{"name":"limb"}],"output":{"name":"limb"}}],[11,"bitand","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"bitor","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"bitxor","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"limb"}}],[11,"eq","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"limb"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"limb"},{"name":"baseint"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"limb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"limb"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"limb_ptr","ramp::ll","",null,null],[3,"Limbs","ramp::ll::limb_ptr","A version of `*const Limb` that is bounds-checked when debug assertions are on",null,null],[3,"LimbsMut","","A version of `*mut Limb` that is bounds-checked when debug assertions are on",null,null],[11,"fmt","","",2,{"inputs":[{"name":"limbs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"limbs"}],"output":{"name":"limbs"}}],[11,"clone","","",3,{"inputs":[{"name":"limbsmut"}],"output":{"name":"limbsmut"}}],[11,"new","","Create a new instance, pointing at `base` and valid\nfrom `base.offset(start)` to `base.offset(end)`.",2,null],[11,"offset","","Move `self` to point to the `x`th Limbs from the\ncurrent location.",2,{"inputs":[{"name":"limbs"},{"name":"isize"}],"output":{"name":"limbs"}}],[11,"eq","","",2,{"inputs":[{"name":"limbs"},{"name":"limbs"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"limbs"},{"name":"limbs"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"limbs"},{"name":"limbs"}],"output":{"name":"ordering"}}],[11,"deref","","",2,{"inputs":[{"name":"limbs"}],"output":{"name":"limb"}}],[11,"new","","Create a new instance, pointing at `base` and valid\nfrom `base.offset(start)` to `base.offset(end)`.",3,null],[11,"offset","","Move `self` to point to the `x`th Limbs from the\ncurrent location.",3,{"inputs":[{"name":"limbsmut"},{"name":"isize"}],"output":{"name":"limbsmut"}}],[11,"eq","","",3,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"limbsmut"},{"name":"limbsmut"}],"output":{"name":"ordering"}}],[11,"deref","","",3,{"inputs":[{"name":"limbsmut"}],"output":{"name":"limb"}}],[11,"as_const","","View the `LimbsMut` as a `Limbs` (an explicit `*const\nLimb` -> `*mut Limb` conversion)",3,{"inputs":[{"name":"limbsmut"}],"output":{"name":"limbs"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"limbsmut"}],"output":{"name":"limb"}}],[0,"int","ramp","",null,null],[3,"Int","ramp::int","An arbitrary-precision signed integer.",null,null],[3,"ParseIntError","","",null,null],[8,"RandomInt","","Trait for generating random `Int`.",null,null],[10,"gen_uint","","Generate a random unsigned `Int` of given bit size.",4,{"inputs":[{"name":"randomint"},{"name":"usize"}],"output":{"name":"int"}}],[10,"gen_int","","Generate a random `Int` of given bit size.",4,{"inputs":[{"name":"randomint"},{"name":"usize"}],"output":{"name":"int"}}],[10,"gen_uint_below","","Generate a random unsigned `Int` less than the given bound.\nFails when the bound is zero or negative.",4,{"inputs":[{"name":"randomint"},{"name":"int"}],"output":{"name":"int"}}],[10,"gen_int_range","","Generate a random `Int` within the given range.\nThe lower bound is inclusive; the upper bound is exclusive.\nFails when the upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randomint"},{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"zero","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"one","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"from_single_limb","","Creates a new Int from the given Limb.",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"sign","","Returns the sign of the Int as either -1, 0 or 1 for self being negative, zero\nor positive, respectively.",5,{"inputs":[{"name":"int"}],"output":{"name":"i32"}}],[11,"abs","","Consumes self and returns the absolute value",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"to_single_limb","","Returns the least-significant limb of self.",5,{"inputs":[{"name":"int"}],"output":{"name":"limb"}}],[11,"abs_cmp","","Compare the absolute value of self to the absolute value of other,\nreturning an Ordering with the result.",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"shrink_to_fit","","Try to shrink the allocated data for this Int.",5,{"inputs":[{"name":"int"}],"output":null}],[11,"to_str_radix","","Returns a string containing the value of self in base `base`. For bases greater than\nten, if `upper` is true, upper-case letters are used, otherwise lower-case ones are used.",5,{"inputs":[{"name":"int"},{"name":"u8"},{"name":"bool"}],"output":{"name":"string"}}],[11,"write_radix","","",5,{"inputs":[{"name":"int"},{"name":"w"},{"name":"u8"},{"name":"bool"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates a new Int from the given string in base `base`.",5,{"inputs":[{"name":"int"},{"name":"str"},{"name":"u8"}],"output":{"name":"result"}}],[11,"divmod","","Divide self by other, returning the quotient, Q, and remainder, R as (Q, R).",5,null],[11,"pow","","Raises self to the power of exp",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"square","","Returns the square of `self`.",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"dsquare","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"sqrt_rem","","Compute the sqrt of this number, returning its floor, S,  and the\nremainder, R, as Some((S, R)), or None if this number is negative.",5,{"inputs":[{"name":"int"}],"output":{"name":"option"}}],[11,"negate","","Negates `self` in-place",5,{"inputs":[{"name":"int"}],"output":null}],[11,"is_even","","Returns whether or not this number is even.",5,{"inputs":[{"name":"int"}],"output":{"name":"bool"}}],[11,"trailing_zeros","","Returns the number of trailing zero bits in this number",5,{"inputs":[{"name":"int"}],"output":{"name":"u32"}}],[11,"count_ones","","Returns the number of ones (the population count) in this number",5,{"inputs":[{"name":"int"}],"output":{"name":"usize"}}],[11,"bit_length","","Returns the number of bits required to represent (the absolute\nvalue of) this number, that is, `floor(log2(abs(self))) + 1`.",5,{"inputs":[{"name":"int"}],"output":{"name":"u32"}}],[11,"bit","","Returns the value of the `bit`th bit in this number, as if it\nwere represented in two's complement.",5,{"inputs":[{"name":"int"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"set_bit","","Set the `bit`th bit of this number to `bit_val`, treating\nnegative numbers as if they're stored in two's complement.",5,{"inputs":[{"name":"int"},{"name":"u32"},{"name":"bool"}],"output":null}],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"clone","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"clone_from","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"default","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"drop","","",5,{"inputs":[{"name":"int"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"bool"}}],[11,"eq","ramp::ll::limb","",0,{"inputs":[{"name":"limb"},{"name":"int"}],"output":{"name":"bool"}}],[11,"cmp","ramp::int","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"option"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"option"}}],[11,"partial_cmp","ramp::ll::limb","",0,{"inputs":[{"name":"limb"},{"name":"int"}],"output":{"name":"option"}}],[11,"hash","ramp::int","",5,{"inputs":[{"name":"int"},{"name":"h"}],"output":null}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"neg","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"shl_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"shl","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"shr_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"shr","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":{"name":"int"}}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"limb"}],"output":null}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":null}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":null}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"add","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"add_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"div_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"bitand_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":null}],[11,"add","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"add","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"sub","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"sub","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"mul","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"mul","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"div","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"div","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"rem","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"rem","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitand","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"bitand","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitand","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitor","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"bitor","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitor","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitxor","","",5,{"inputs":[{"name":"int"},{"name":"baseint"}],"output":{"name":"int"}}],[11,"bitxor","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"bitxor","","",1,{"inputs":[{"name":"baseint"},{"name":"int"}],"output":{"name":"int"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"int"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"int"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"i8"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"i16"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"i32"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"i64"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"isize"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"u8"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"u16"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"u32"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"u64"}],"output":{"name":"int"}}],[11,"from","","",5,{"inputs":[{"name":"int"},{"name":"usize"}],"output":{"name":"int"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",6,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"int"},{"name":"str"}],"output":{"name":"result"}}],[11,"zero","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"one","","",5,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"step","","",5,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"option"}}],[11,"steps_between","","",5,{"inputs":[{"name":"int"},{"name":"int"},{"name":"int"},{"name":"int"}],"output":{"name":"option"}}]],"paths":[[3,"Limb"],[6,"BaseInt"],[3,"Limbs"],[3,"LimbsMut"],[8,"RandomInt"],[3,"Int"],[3,"ParseIntError"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Crate docs",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",9,null],[12,"dli_fbase","","",9,null],[12,"dli_sname","","",9,null],[12,"dli_saddr","","",9,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",10,null],[12,"sa_data","","",10,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",11,null],[12,"sin_port","","",11,null],[12,"sin_addr","","",11,null],[12,"sin_zero","","",11,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",12,null],[12,"sin6_port","","",12,null],[12,"sin6_flowinfo","","",12,null],[12,"sin6_addr","","",12,null],[12,"sin6_scope_id","","",12,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",13,null],[12,"sun_path","","",13,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",14,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",15,null],[12,"ai_family","","",15,null],[12,"ai_socktype","","",15,null],[12,"ai_protocol","","",15,null],[12,"ai_addrlen","","",15,null],[12,"ai_addr","","",15,null],[12,"ai_canonname","","",15,null],[12,"ai_next","","",15,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",16,null],[12,"sll_protocol","","",16,null],[12,"sll_ifindex","","",16,null],[12,"sll_hatype","","",16,null],[12,"sll_pkttype","","",16,null],[12,"sll_halen","","",16,null],[12,"sll_addr","","",16,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",17,null],[12,"tm_min","","",17,null],[12,"tm_hour","","",17,null],[12,"tm_mday","","",17,null],[12,"tm_mon","","",17,null],[12,"tm_year","","",17,null],[12,"tm_wday","","",17,null],[12,"tm_yday","","",17,null],[12,"tm_isdst","","",17,null],[12,"tm_gmtoff","","",17,null],[12,"tm_zone","","",17,null],[3,"dirent","","",null,null],[12,"d_ino","","",18,null],[12,"d_off","","",18,null],[12,"d_reclen","","",18,null],[12,"d_type","","",18,null],[12,"d_name","","",18,null],[3,"dirent64","","",null,null],[12,"d_ino","","",19,null],[12,"d_off","","",19,null],[12,"d_reclen","","",19,null],[12,"d_type","","",19,null],[12,"d_name","","",19,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",20,null],[12,"rlim_max","","",20,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",21,null],[12,"gl_pathv","","",21,null],[12,"gl_offs","","",21,null],[12,"gl_flags","","",21,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",22,null],[12,"ifa_name","","",22,null],[12,"ifa_flags","","",22,null],[12,"ifa_addr","","",22,null],[12,"ifa_netmask","","",22,null],[12,"ifa_ifu","","",22,null],[12,"ifa_data","","",22,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",24,null],[12,"f_frsize","","",24,null],[12,"f_blocks","","",24,null],[12,"f_bfree","","",24,null],[12,"f_bavail","","",24,null],[12,"f_files","","",24,null],[12,"f_ffree","","",24,null],[12,"f_favail","","",24,null],[12,"f_fsid","","",24,null],[12,"f_flag","","",24,null],[12,"f_namemax","","",24,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",25,null],[12,"sa_mask","","",25,null],[12,"sa_flags","","",25,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",26,null],[12,"ss_flags","","",26,null],[12,"ss_size","","",26,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",27,null],[12,"si_errno","","",27,null],[12,"si_code","","",27,null],[12,"_pad","","",27,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",28,null],[12,"gl_pathv","","",28,null],[12,"gl_offs","","",28,null],[12,"gl_flags","","",28,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",29,null],[12,"st_ino","","",29,null],[12,"st_nlink","","",29,null],[12,"st_mode","","",29,null],[12,"st_uid","","",29,null],[12,"st_gid","","",29,null],[12,"st_rdev","","",29,null],[12,"st_size","","",29,null],[12,"st_blksize","","",29,null],[12,"st_blocks","","",29,null],[12,"st_atime","","",29,null],[12,"st_atime_nsec","","",29,null],[12,"st_mtime","","",29,null],[12,"st_mtime_nsec","","",29,null],[12,"st_ctime","","",29,null],[12,"st_ctime_nsec","","",29,null],[3,"stat64","","",null,null],[12,"st_dev","","",30,null],[12,"st_ino","","",30,null],[12,"st_nlink","","",30,null],[12,"st_mode","","",30,null],[12,"st_uid","","",30,null],[12,"st_gid","","",30,null],[12,"st_rdev","","",30,null],[12,"st_size","","",30,null],[12,"st_blksize","","",30,null],[12,"st_blocks","","",30,null],[12,"st_atime","","",30,null],[12,"st_atime_nsec","","",30,null],[12,"st_mtime","","",30,null],[12,"st_mtime_nsec","","",30,null],[12,"st_ctime","","",30,null],[12,"st_ctime_nsec","","",30,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"putenv","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"usleep","","",null,null],[5,"recvfrom","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"mkfifo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"posix_memalign","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"shm_open","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",31,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",31,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",31,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",31,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",31,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",31,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",31,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",31,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",31,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",31,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",31,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",31,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",31,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",31,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",31,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",31,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",31,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",31,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",31,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",31,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",31,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",31,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",32,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",33,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",34,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",35,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",35,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",35,null],[11,"clone","","",36,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",36,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",36,null],[11,"fmt","","",37,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",38,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",38,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",39,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",40,null],[11,"eq","","",41,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",42,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",42,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",43,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",44,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",44,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",44,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",44,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",44,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",44,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",44,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",44,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",44,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",44,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",44,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",44,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",44,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",44,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",44,null],[11,"eq","","",44,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",44,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",44,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",44,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",45,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",45,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",45,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",45,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",45,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",45,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",45,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",45,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",45,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",45,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",45,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",45,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",45,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",45,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",45,null],[11,"eq","","",45,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",45,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",45,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",45,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",46,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",46,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",46,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",46,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",47,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",48,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",48,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",49,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",50,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",50,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",50,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",50,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",51,null],[11,"get","","Dereferences the content.",51,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",51,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",52,null],[11,"clone","","",52,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",53,null],[11,"eq","","",53,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",53,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",53,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",53,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",54,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",54,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",55,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",56,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",57,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",58,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",58,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",58,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",59,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",59,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",59,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",59,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",59,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",59,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",59,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",60,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",61,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",62,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",63,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",64,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",65,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",61,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",61,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",61,null],[11,"swap","","Stores a value into the bool, returning the old value.",61,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",61,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",61,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",61,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",61,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",61,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",62,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",62,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",62,null],[11,"swap","","Stores a value into the isize, returning the old value.",62,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",62,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",62,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",62,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",62,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",62,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",62,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",63,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",63,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",63,null],[11,"swap","","Stores a value into the usize, returning the old value.",63,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",63,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",63,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",63,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",63,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",63,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",63,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",64,null],[11,"load","","Loads a value from the pointer.",64,null],[11,"store","","Stores a value into the pointer.",64,null],[11,"swap","","Stores a value into the pointer, returning the old value.",64,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",64,null],[11,"fmt","","",63,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",66,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",66,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",66,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",66,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",66,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",66,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",66,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",68,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",68,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",68,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",68,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",68,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",68,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",68,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",68,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",68,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",69,null],[11,"clone","","",69,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",70,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",70,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",70,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",70,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",71,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",71,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",72,null],[11,"deref","","",71,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",71,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",73,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",73,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",73,null],[11,"clone","core::char","",74,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",75,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",74,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"clone","","",76,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",77,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",76,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"clone","core::iter","",78,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",78,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",79,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",80,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",80,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"clone","","",81,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",82,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",81,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",81,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",81,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",81,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",83,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",84,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",85,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",86,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",87,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"nth","","",87,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",87,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",87,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",88,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",88,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",88,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",88,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",88,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",88,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",89,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",90,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"clone","","",91,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",91,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",91,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",91,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",91,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"clone","","",92,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",92,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",92,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"clone","","",93,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",93,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"clone","","",94,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",94,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",95,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",95,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",95,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",95,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",96,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",56,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",55,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",97,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"clone","","",98,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",98,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",97,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next","core::ops","",55,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",56,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",99,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",99,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",100,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",100,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",100,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",100,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",101,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",101,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",101,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",31,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",31,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",102,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",102,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",104,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",31,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",106,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",107,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",108,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",108,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",108,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",108,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",108,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",108,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",108,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",108,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",108,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",108,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",108,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",108,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",108,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",108,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",108,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",108,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",108,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",108,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",108,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",108,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",108,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",110,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",108,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",112,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",113,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",114,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",115,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",116,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",117,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",118,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",119,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",120,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",121,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",116,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",117,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",118,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",119,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",112,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",113,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",114,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",115,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",120,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",121,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",116,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",117,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",118,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",119,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",112,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",113,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",114,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",115,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",120,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",121,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",116,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",117,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",118,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",119,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",112,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",113,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",114,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",115,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",120,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",121,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",120,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",121,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",116,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",117,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",118,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",119,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",112,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",113,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",114,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",115,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",116,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",117,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",118,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",119,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",112,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",113,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",114,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",115,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",116,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",117,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",118,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",119,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",112,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",113,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",114,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",115,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",116,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",117,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",118,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",119,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",112,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",113,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",114,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",115,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",116,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",117,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",118,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",119,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",112,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",113,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",114,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",115,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",122,null],[11,"next","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"count","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",122,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",123,null],[11,"next","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"count","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",123,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",124,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",124,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",125,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",125,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next_back","","",125,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",126,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next","","",127,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next","","",128,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next","","",129,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next","","",130,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"clone","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"count","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",131,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"count","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",132,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"count","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",133,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",134,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",135,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",136,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",135,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",135,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",135,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",140,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",141,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",142,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",143,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",144,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",144,null],[11,"matching","","",144,null],[11,"use_early_reject","","",145,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",145,null],[11,"matching","","",145,null],[11,"eq","core::str","",146,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",146,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",147,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",147,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",147,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",148,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",148,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",149,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",149,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"next_back","","",149,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",149,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"count","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",150,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",151,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",152,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",153,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",152,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",153,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",154,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",155,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",155,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",154,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",157,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",158,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",159,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",160,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",161,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",160,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",161,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",163,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",163,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",165,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",165,null],[11,"next_back","","",165,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",167,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",167,null],[11,"call_mut","","",167,null],[11,"call_once","","",167,null],[11,"next","","",166,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",166,null],[11,"next_back","","",166,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",169,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",169,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",169,null],[11,"finish","","",169,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",169,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",169,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",170,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",171,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",172,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",173,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",174,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",175,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",176,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",177,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",178,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",178,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",179,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",179,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",179,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",180,null],[11,"entry","","Adds a new entry to the set output.",181,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",181,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",181,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",182,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",182,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",182,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",183,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",183,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",183,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",184,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",185,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",186,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",187,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",188,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",189,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",190,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",191,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",192,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",192,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",193,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",193,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",193,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",193,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",193,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",193,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",193,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",193,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",193,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",193,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",193,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",193,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",193,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",193,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",193,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",193,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",193,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",193,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",193,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",193,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",193,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",53,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",66,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",194,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",194,null],[11,"clone","libc","",29,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",30,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",195,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",196,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",25,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",26,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",27,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",28,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",18,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",19,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",20,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",21,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",22,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",197,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",198,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",199,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",200,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",23,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",24,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",11,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",15,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",201,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",17,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"WNOHANG","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"Dl_info"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"stat"],[3,"stat64"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fd_set"]]};
searchIndex['advapi32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['ieee754'] = {"items":[[0,"","ieee754","Low-level manipulations of IEEE754 floating-point numbers.",null,null],[3,"Iter","","An iterator over floating point numbers, created by `Ieee754::upto`.",null,null],[8,"Bits","","",null,null],[10,"as_u64","","",0,{"inputs":[{"name":"bits"}],"output":{"name":"u64"}}],[8,"Ieee754","","Types that are IEEE754 floating point numbers.",null,null],[10,"upto","","Iterate over each value of `Self` in `[self, lim]`.",1,{"inputs":[{"name":"ieee754"},{"name":"self"}],"output":{"name":"iter"}}],[16,"Bits","","A type that represents the raw bits of `Self`.",1,null],[16,"Exponent","","A type large enough to store the true exponent of `Self`.",1,null],[16,"RawExponent","","A type large enough to store the raw exponent (i.e. with the bias).",1,null],[16,"Significand","","A type large enough to store the significand of `Self`.",1,null],[10,"next","","Return the next value after `self`.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"self"}}],[10,"prev","","Return the previous value before `self`.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"self"}}],[10,"bits","","View `self` as a collection of bits.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"bits"}}],[10,"from_bits","","View a collections of bits as a floating point number.",1,{"inputs":[{"name":"ieee754"},{"name":"bits"}],"output":{"name":"self"}}],[10,"exponent_bias","","Get the bias of the stored exponent.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"exponent"}}],[10,"decompose_raw","","Break `self` into the three constituent parts of an IEEE754 float.",1,null],[10,"recompose_raw","","Create a `Self` out of the three constituent parts of an IEEE754 float.",1,{"inputs":[{"name":"ieee754"},{"name":"bool"},{"name":"rawexponent"},{"name":"significand"}],"output":{"name":"self"}}],[10,"decompose","","Break `self` into the three constituent parts of an IEEE754 float.",1,null],[10,"recompose","","Create a `Self` out of the three constituent parts of an IEEE754 float.",1,{"inputs":[{"name":"ieee754"},{"name":"bool"},{"name":"exponent"},{"name":"significand"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}]],"paths":[[8,"Bits"],[8,"Ieee754"],[3,"Iter"]]};
searchIndex['hamming'] = {"items":[[0,"","hamming","A crate to count ones and xor bytes, fast (aka popcount, hamming\nweight and hamming distance).",null,null],[5,"weight","","Computes the [Hamming\nweight](https://en.wikipedia.org/wiki/Hamming_weight) of `x`, that\nis, the population count, or number of ones.",null,null],[5,"distance","","Computes the bitwise [Hamming\ndistance](https://en.wikipedia.org/wiki/Hamming_distance) between\n`x` and `y`, that is, the number of bits where `x` and `y` differ,\nor, the number of set bits in the xor of `x` and `y`.",null,null],[5,"distance_fast","","Computes the bitwise [Hamming\ndistance](https://en.wikipedia.org/wiki/Hamming_distance) between\n`x` and `y`, that is, the number of bits where `x` and `y` differ,\nor, the number of set bits in the xor of `x` and `y`.",null,null]],"paths":[]};
initSearch(searchIndex);
